[{"e:\\WEB\\Projects\\web-design\\contacts\\src\\index.tsx":"1","e:\\WEB\\Projects\\web-design\\contacts\\src\\reportWebVitals.ts":"2","e:\\WEB\\Projects\\web-design\\contacts\\src\\App.tsx":"3","e:\\WEB\\Projects\\web-design\\contacts\\src\\reduxToolkit\\index.ts":"4","e:\\WEB\\Projects\\web-design\\contacts\\src\\pages\\Contacts\\index.tsx":"5","e:\\WEB\\Projects\\web-design\\contacts\\src\\reduxToolkit\\toolkitSlice.ts":"6","e:\\WEB\\Projects\\web-design\\contacts\\src\\pages\\Contacts\\useDataViewMode.ts":"7","e:\\WEB\\Projects\\web-design\\contacts\\src\\pages\\Contacts\\constants.ts":"8","e:\\WEB\\Projects\\web-design\\contacts\\src\\components\\Selectors\\index.ts":"9","e:\\WEB\\Projects\\web-design\\contacts\\src\\pages\\Contacts\\ToggleDataViewMode\\index.tsx":"10","e:\\WEB\\Projects\\web-design\\contacts\\src\\pages\\Contacts\\ContactsTable\\index.tsx":"11","e:\\WEB\\Projects\\web-design\\contacts\\src\\components\\Search\\index.tsx":"12","e:\\WEB\\Projects\\web-design\\contacts\\src\\components\\Pagination\\index.tsx":"13","e:\\WEB\\Projects\\web-design\\contacts\\src\\constants\\nationalities.ts":"14","e:\\WEB\\Projects\\web-design\\contacts\\src\\components\\CopyToClipboard\\index.tsx":"15"},{"size":530,"mtime":1620936746991,"results":"16","hashOfConfig":"17"},{"size":451,"mtime":1620936746994,"results":"18","hashOfConfig":"17"},{"size":281,"mtime":1620936746988,"results":"19","hashOfConfig":"17"},{"size":492,"mtime":1621022578641,"results":"20","hashOfConfig":"17"},{"size":2849,"mtime":1621028758982,"results":"21","hashOfConfig":"17"},{"size":1611,"mtime":1621022578642,"results":"22","hashOfConfig":"17"},{"size":531,"mtime":1621027284645,"results":"23","hashOfConfig":"17"},{"size":76,"mtime":1620936746992,"results":"24","hashOfConfig":"17"},{"size":1291,"mtime":1621022578637,"results":"25","hashOfConfig":"17"},{"size":1384,"mtime":1621027088537,"results":"26","hashOfConfig":"17"},{"size":3261,"mtime":1621028536171,"results":"27","hashOfConfig":"17"},{"size":711,"mtime":1620936746990,"results":"28","hashOfConfig":"17"},{"size":1517,"mtime":1621022578636,"results":"29","hashOfConfig":"17"},{"size":991,"mtime":1620936746990,"results":"30","hashOfConfig":"17"},{"size":1384,"mtime":1621371416060,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"14ajlhz",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"e:\\WEB\\Projects\\web-design\\contacts\\src\\index.tsx",[],["67","68"],"e:\\WEB\\Projects\\web-design\\contacts\\src\\reportWebVitals.ts",[],"e:\\WEB\\Projects\\web-design\\contacts\\src\\App.tsx",[],"e:\\WEB\\Projects\\web-design\\contacts\\src\\reduxToolkit\\index.ts",[],"e:\\WEB\\Projects\\web-design\\contacts\\src\\pages\\Contacts\\index.tsx",["69","70","71","72"],"import React, { useCallback } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport { ContactsTable } from \"./ContactsTable\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { Box } from \"@material-ui/core\";\nimport { ToggleDataViewMode } from \"./ToggleDataViewMode\";\nimport { DATA_VIEW_MODES } from \"./constants\";\nimport { useDataViewMode } from \"./useDataViewMode\";\n\nimport { Pagination } from \"../../components/Pagination\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport toolkitSlice, {\n  setContactsInitial,\n} from \"../../reduxToolkit/toolkitSlice\";\nimport { Search } from \"../../components/Search\";\nimport { getCurrentContacts } from \"../../components/Selectors\";\nimport store, { RootState } from \"../../reduxToolkit\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      marginTop: theme.spacing(4),\n    },\n    headContainer: {\n      marginBottom: theme.spacing(3),\n    },\n  })\n);\n\nexport const Contacts = () => {\n  console.log(\"38 Contacts\");\n  const classes = useStyles();\n  const isLoading = useSelector((state: RootState) => state.toolkit.isLoading);\n  const isError = useSelector((state: RootState) => state.toolkit.isError);\n  const [dataViewMode, setDataViewMode] = useDataViewMode();\n\n  const currentContacts = useSelector(getCurrentContacts);\n\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    dispatch(setContactsInitial());\n  }, []);\n\n  return (\n    <Container className={classes.root}>\n      <Search />\n      <Grid container spacing={3}>\n        <Grid item xs={12} className={classes.headContainer}>\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            <Typography variant=\"h4\" component=\"h1\">\n              Contacts\n            </Typography>\n            <ToggleDataViewMode\n              dataViewMode={dataViewMode}\n              setDataViewMode={setDataViewMode}\n            />\n          </Box>\n        </Grid>\n        <Grid item xs={12}>\n          {(() => {\n            if (isLoading) {\n              // @ts-ignore\n              return <CircularProgress>Loading...</CircularProgress>;\n            }\n            if (isError)\n              return <div data-testid=\"contacts-error\">Error...</div>;\n\n            if (dataViewMode === DATA_VIEW_MODES.TABLE)\n              return (\n                <>\n                  <ContactsTable data={currentContacts} />\n                  <Pagination />\n                </>\n              );\n            if (dataViewMode === DATA_VIEW_MODES.GRID)\n              return <div data-testid=\"grid-container\">grid</div>;\n            return null;\n          })()}\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n","e:\\WEB\\Projects\\web-design\\contacts\\src\\reduxToolkit\\toolkitSlice.ts",["73"],"import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nexport const setContactsInitial = createAsyncThunk(\r\n  \"contacts/setContactsInitial\",\r\n  async (searchId, { getState, requestId }) => {\r\n    const response = await axios.get(\"https://randomuser.me/api/?results=200\");\r\n    return response?.data?.results;\r\n  }\r\n);\r\n\r\nconst contactsSlice = createSlice({\r\n  name: \"contactsSlice\",\r\n  initialState: {\r\n    list: [],\r\n    isLoading: true,\r\n    isError: false,\r\n    debouncedFilterData: \"\",\r\n    currentPage: 1,\r\n    contactsPerPage: 10,\r\n    exceptionText: \"\",\r\n  },\r\n\r\n  reducers: {\r\n    setDebouncedFilterData(state, action: PayloadAction<string>) {\r\n      state.debouncedFilterData = action.payload;\r\n    },\r\n    setCurrentPage(state, action: PayloadAction<number>) {\r\n      state.currentPage = action.payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder.addCase(setContactsInitial.pending, (state, action) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(\r\n      setContactsInitial.fulfilled,\r\n      (state, action: PayloadAction<[]>) => {\r\n        state.list = action.payload;\r\n        state.isLoading = false;\r\n      }\r\n    );\r\n    builder.addCase(setContactsInitial.rejected, (state, action) => {\r\n      const { requestId } = action.meta;\r\n      state.isError = true;\r\n      state.exceptionText = action.error?.toString();\r\n      //state.currentRequestId = undefined;\r\n    });\r\n  },\r\n});\r\n\r\nexport default contactsSlice.reducer;\r\nexport const { setDebouncedFilterData, setCurrentPage } = contactsSlice.actions;\r\n","e:\\WEB\\Projects\\web-design\\contacts\\src\\pages\\Contacts\\useDataViewMode.ts",[],"e:\\WEB\\Projects\\web-design\\contacts\\src\\pages\\Contacts\\constants.ts",[],"e:\\WEB\\Projects\\web-design\\contacts\\src\\components\\Selectors\\index.ts",[],"e:\\WEB\\Projects\\web-design\\contacts\\src\\pages\\Contacts\\ToggleDataViewMode\\index.tsx",[],"e:\\WEB\\Projects\\web-design\\contacts\\src\\pages\\Contacts\\ContactsTable\\index.tsx",["74"],"import { format } from \"date-fns\";\nimport parseISO from \"date-fns/parseISO\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport React from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { Typography } from \"@material-ui/core\";\nimport { CopyToClipboard } from \"../../../components/CopyToClipboard\";\nimport { NATIONALITIES_HUMAN_NAME } from \"../../../constants/nationalities\";\nimport { Contact } from \"../../../Interfaces/Contact\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nexport const ContactsTable: React.FC<[]> = ({ data: [] }) => {\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper} data-testid=\"table-container\">\n      <Table className={classes.table} aria-label=\"contacts table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Avatar</TableCell>\n            <TableCell>Full name</TableCell>\n            <TableCell>Birthday</TableCell>\n            <TableCell>Email</TableCell>\n            <TableCell>Phone</TableCell>\n            <TableCell>Location</TableCell>\n            <TableCell>Nationality</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data?.map((contact: Contact) => (\n            <TableRow key={contact.login.uuid}>\n              <TableCell component=\"th\" scope=\"row\">\n                <Avatar\n                  alt={\n                    contact.name.title +\n                    \" \" +\n                    contact.name.first +\n                    \" \" +\n                    contact.name.last\n                  }\n                  src={contact.picture.thumbnail}\n                />\n              </TableCell>\n              <TableCell>\n                {contact.name.title +\n                  \" \" +\n                  contact.name.first +\n                  \" \" +\n                  contact.name.last}\n              </TableCell>\n              <TableCell>\n                <Typography>\n                  {format(parseISO(contact.dob.date), \"MM/dd/yyyy\")}\n                </Typography>\n                <Typography>{contact.dob.age} years</Typography>\n              </TableCell>\n              <TableCell>\n                <CopyToClipboard text={contact.email} />\n              </TableCell>\n              <TableCell>\n                <CopyToClipboard text={contact.phone} />\n              </TableCell>\n              <TableCell>\n                <CopyToClipboard\n                  text={\"/\" + contact.location.country + \"/\"}\n                ></CopyToClipboard>\n                <Typography>\n                  {contact.location.city}, {contact.location.street.name}{\" \"}\n                  {contact.location.street.number}\n                </Typography>\n              </TableCell>\n              <TableCell>{NATIONALITIES_HUMAN_NAME[contact.nat]}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n","e:\\WEB\\Projects\\web-design\\contacts\\src\\components\\Search\\index.tsx",[],"e:\\WEB\\Projects\\web-design\\contacts\\src\\components\\Pagination\\index.tsx",["75"],"import React, { useCallback } from \"react\";\r\nimport styles from \"./Pagination.module.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setCurrentPage } from \"../../reduxToolkit/toolkitSlice\";\r\nimport { contactsFilteredSelector } from \"../Selectors\";\r\nimport { RootState } from \"../../reduxToolkit\";\r\n\r\nexport const Pagination = React.memo(() => {\r\n  const dispatch = useDispatch();\r\n\r\n  const currentPage = useSelector(\r\n    (state: RootState) => state.toolkit.currentPage\r\n  );\r\n  const contactsPerPage = useSelector(\r\n    (state: RootState) => state.toolkit.contactsPerPage\r\n  );\r\n\r\n  const contactsFiltered = useSelector(contactsFilteredSelector);\r\n\r\n  const paginate = useCallback(\r\n    (pageNumber) => dispatch(setCurrentPage(pageNumber)),\r\n    []\r\n  );\r\n\r\n  const pageNumbers = [];\r\n  for (\r\n    let i = 1;\r\n    i <= Math.ceil(contactsFiltered.length / contactsPerPage);\r\n    i++\r\n  ) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <nav>\r\n        <ul className={styles.ulStyle}>\r\n          {pageNumbers.map((number) => (\r\n            <li key={number}>\r\n              <a\r\n                href=\"!#\"\r\n                className={\r\n                  currentPage === number\r\n                    ? styles.currentPageNum\r\n                    : styles.pageNum\r\n                }\r\n                onClick={() => paginate(number)}\r\n              >\r\n                {number}\r\n              </a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n});\r\n","e:\\WEB\\Projects\\web-design\\contacts\\src\\constants\\nationalities.ts",[],"e:\\WEB\\Projects\\web-design\\contacts\\src\\components\\CopyToClipboard\\index.tsx",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":1,"column":17,"nodeType":"82","messageId":"83","endLine":1,"endColumn":28},{"ruleId":"80","severity":1,"message":"84","line":16,"column":8,"nodeType":"82","messageId":"83","endLine":16,"endColumn":20},{"ruleId":"80","severity":1,"message":"85","line":21,"column":8,"nodeType":"82","messageId":"83","endLine":21,"endColumn":13},{"ruleId":"86","severity":1,"message":"87","line":46,"column":6,"nodeType":"88","endLine":46,"endColumn":8,"suggestions":"89"},{"ruleId":"80","severity":1,"message":"90","line":45,"column":15,"nodeType":"82","messageId":"83","endLine":45,"endColumn":24},{"ruleId":"91","severity":1,"message":"92","line":25,"column":53,"nodeType":"93","messageId":"94","endLine":25,"endColumn":55},{"ruleId":"86","severity":1,"message":"95","line":22,"column":5,"nodeType":"88","endLine":22,"endColumn":7,"suggestions":"96"},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"@typescript-eslint/no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'toolkitSlice' is defined but never used.","'store' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["99"],"'requestId' is assigned a value but never used.","no-empty-pattern","Unexpected empty array pattern.","ArrayPattern","unexpected","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["100"],"no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"101","fix":"103"},"Update the dependencies array to be: [dispatch]",{"range":"104","text":"105"},{"range":"106","text":"105"},[1612,1614],"[dispatch]",[773,775]]